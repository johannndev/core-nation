<?php

namespace App\Console\Commands;

use App\Models\Item;
use App\Models\Jubelioorder;
use App\Models\Jubeliosync;
use App\Models\Transaction;
use Carbon\Carbon;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;

class OrderJubelioToAria extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'jubelio:order-jubelio-to-aria';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Proese order jubelio ke aria transaction';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        Log::info('Task dijalankan pada: ' . now());
      
        $logjubelio = Jubelioorder::where('type','SALE')->where('status',0)->where('run_count',0)->orderBy('updated_at','asc')->first();

        if($logjubelio){

            $arrayStoreId = $dataApi['store_id'];
            $arrayLocationId = $dataApi['location_id'];
            $arrayItems = $dataApi['items'];
            $arrayRunCount = $logjubelio->logjubelio+1;
            $arrayInvoice = $dataApi['salesorder_no'];
            $arraySubTotal = $dataApi['sub_total'];
            $arrayGrandTotal = $dataApi['grand_total'];
          
            // Cari mapping gudang dengan lock
            $jubelioSync = Jubeliosync::where('jubelio_store_id', $arrayStoreId)
                ->where('jubelio_location_id',  $arrayLocationId)
                ->lockForUpdate()
                ->first();

            if($jubelioSync){

                // $produkIds = collect($dataApi['items'])->pluck('item_code')->unique(); // Hilangkan duplikasi ID
                $itemCodes = collect($arrayItems)->pluck('item_code')->unique();

                // Ambil hanya kolom yang diperlukan
                $existingProducts = Item::whereIn('code', $itemCodes)
                    ->get(['id', 'code', 'name'])
                    ->keyBy('code'); // Index berdasarkan 'code' agar pencarian lebih cepat
                
                // Proses matching dengan map agar lebih efisien
                $groupedData = collect($arrayItems)->partition(fn($item) => isset($existingProducts[$item['item_code']]));
                
                $matched = $groupedData[0]->map(fn($item) => [
                    'itemId'   => $existingProducts[$item['item_code']]->id,
                    'code'     => $existingProducts[$item['item_code']]->code,
                    'name'     => $existingProducts[$item['item_code']]->name,
                    'quantity' => $item['qty'],
                    'price'    => $item['price'],
                    'discount' => 0,
                    'subtotal' => $item['qty']*$item['price'],
                ])->values(); // Reset indeks array
                
                $notMatched = $groupedData[1]->values(); // Reset indeks array

                $createData = [];

                if($notMatched->count() > 0){
                    // Ambil item_code dari notMatched
                    $item_codes = array_column($notMatched->toArray(), 'item_code');

                    // Ubah menjadi string dengan koma sebagai pemisah
                    $notMatchedString = implode(", ", $item_codes);

                    $logjubelio->update(['run_count' => $arrayRunCount, 'error_type' => 1, 'error' => 'SKU tidak di temukan: '.$notMatchedString, 'status' => 1]);
                }

                if($matched->count() > 0){

                    $cekTransaksi = Transaction::where('type',Transaction::TYPE_SELL)->where('invoice',$arrayInvoice)->first();

                    if($cekTransaksi){

                        $logjubelio->update(['run_count' =>  $arrayRunCount, 'error_type' => 2, 'error' =>'Transaction sudah ada',  'status' => 2, ]);

                    }else{

                        
                        $adjust = $arraySubTotal - $arrayGrandTotal;
                        

                        $dataJubelio = [
                            "date" => Carbon::now()->toDateString(),
                            "due" => null,
                            "warehouse" => $jubelioSync->warehouse_id,
                            "customer" => $jubelioSync->customer_id,
                            "invoice" => $arrayInvoice,
                            "note" => "generated by cron aria",
                            "account" => "7204",
                            "amount" => null,
                            "paid" => null,
                            "addMoreInputFields" => $matched,
                            "disc" => "0",
                            "adjustment" =>  $this->toggleSign($adjust),
                            "ongkir" => "0"
                        ];

                        $dataCollect =  (object) $dataJubelio;

                        $createData =  $this->createTransaction(Transaction::TYPE_SELL, $dataCollect);

                    
                        if($createData['status'] == "200" ){

                            $logjubelio->update(['run_count' => $arrayRunCount, 'error_type' => 10, 'error' =>null,'status' => 2]);

        
                        }else{

                            $logjubelio->update(['cron_run' => $arrayRunCount, 'error_type' => 1, 'error' => $createData['message'],'status' => 1]);

                        }

                    }

                }

                

            

            }else{

                $logjubelio->update(['run_count' =>  $arrayRunCount, 'error_type' => 1, 'error' =>'Data sync dengan aria tidak ditemukan',  'status' => 1, ] );

               
            }

        }
    }
}
